all.data <- adply(all.data, c(721000,4))
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))		#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")
all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2
all.data <- data.frame(all.data)
head(all.data)
all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- as.data.frame(as.matrix(all.data))
head(all.data)
dim(all.data)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- ftable(all.data)
head(all.data)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- as.data.frame(as.matrix(table(all.data)))
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))		#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- as.data.frame(as.matrix(table(all.data)))
dim(all.data)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))		#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)
head(all.data)
dim(all.data)
tail(all.data)
?cast
all.data <- dcast(all.data)
library(reshape2)
all.data <- dcast(all.data)
all.data <- dcast(all.data, time ~ A2)
all.data <- dcast(all.data, time ~ d2)
all.data <- dcast(all.data, all.data ~ d3)
head(all.data)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))		#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output
all.data1 <- dcast(all.data, all.data ~ d2)
head(all.data1)
all.data <- array2df(all.data, matrix = FALSE)
all.data1 <- dcast(all.data, all.data ~ d2)
dim(all.data1)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)
head(all.data)
all.data1 <- dcast(all.data, d2 ~ d3)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)
head(all.data)
all.data1 <- dcast(all.data, d2)
all.data1 <- dcast(all.data, d2 ~ all.data)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)
head(all.data)
all.data1 <- dcast(all.data, all.data ~ d2)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)#
	all.data1 <- dcast(all.data, all.data ~ )
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)#
	all.data1 <- dcast(all.data, all.data ~ d1)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)
head(all.data)
all.data1 <- dcast(all.data, all.data ~ d3)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)#
	all.data1 <- dcast(all.data, all.data ~ d1 ~ d2 ~ d3)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)#
	all.data1 <- dcast(all.data, all.data ~ d1, margins = TRUE)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, matrix = FALSE)
head(all.data)
dim(all.data)
all.data <- all.data[,-c(2)]
head(all.data)
all.data <- all.data[,-c(3)]
head(all.data)
all.data1 <- dcast(all.data, all.data ~ d2)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data)
head(all.data)
tail(all.data)
length(all.data$d2)
length(all.data$d2 == "time")
length(all.data$d2 == "A3")
dim(all.data)
?array2df
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output
head(all.data)
all.data <- as.data.frame(all.data)
head(all.data)
all.data1 <- dcast(all.data)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "dataframe")
head(all.data)
tail(all.data)
all.data <- array2df(all.data)
head(all.data)
dim(all.data)
tail(all.data)
?array2df
all.data <- array2df(all.data, levels = list(time,A1,A2,A3))
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")
all.data <- array2df(all.data, levels = list(time,A1,A2,A3))
head(all.data)
all.data <- array2df(all.data, levels = time)
all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c("time","A1","A2","A3")
)
all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)))
head(all.data)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)))
head(all.data)
dim(all.data)
tail(all.data)
all.data1 <- cast(all.data, x ~ all.data)
all.data1 <- dcast(all.data, x ~ all.data)
head(all.data1)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)))#
	all.data1 <- dcast(all.data, all.data ~ c(v,c))
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)))#
	all.data1 <- dcast(all.data, all.data ~ c(x,c))
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)))#
	all.data1 <- dcast(all.data, all.data ~ x ~ c)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)))#
	all.data <- alldata[,-c(3)]#
	all.data1 <- dcast(all.data, all.data ~ x)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)))#
	all.data <- all.data[,-c(3)]#
	all.data1 <- dcast(all.data, all.data ~ x)
head(all.data1)
tail(all.data1)
?array2df
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NA, x = TRUE, c = c(1:1000)))#
	#all.data <- all.data[,-c(3)]
head(all.data)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(TRUE, x = TRUE, c = c(1:1000)))#
	#all.data <- all.data[,-c(3)]
head(all.data)
dim(all.data)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = NA))#
	#all.data <- all.data[,-c(3)]
head(all.data)
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = NULL))#
	#all.data <- all.data[,-c(3)]
head(all.data)
all.data1 <- dcast(all.data, all.data ~ x)
head(all.data1)
tail(all.data)
dim(all.data1)
?dcast
?array2df
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = NULL), label.x = "variable")
head(all.data)
?cast
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = NULL), label.x = "variable")#
	all.data1 <- dcast(all.data, all.data ~ x, margins = "x")
head(all.data1)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))		#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = NULL), label.x = "variable")
head(all.data)
all.data1 <- data.frame(t(all.data))
head(all.data1)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))		#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = NULL), label.x = "variable")
head(all.data)
all.data1 <- dcast(all.data, variable ~ x)
head(all.data1)
?dcast
all.data1 <- dcast(all.data, variable ~ x, value.var = variable)
all.data1 <- dcast(all.data, variable ~ x, value.var = "variable")
head(all.data1)
all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = NULL), label.x = "variable")
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))		#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = NULL), label.x = "variable")
head(all.data)
all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = 1:1000), label.x = "variable")
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")
head(all.data)
tail(all.data)
time.data <- subset(all.data, all.data$x = "time")#
	A1.data <- subset(all.data, all.data$x = "A1")#
	A2.data <- subset(all.data, all.data$x = "A2")#
	A3.data <- subset(all.data, all.data$x = "A3")
time.data <- subset(all.data, all.data$x == "time")#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A3.data <- subset(all.data, all.data$x == "A3")
head(time.data)
time.data <- time.data[,-2]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))
head(time.data)
time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))
head(time.data)
dim(time.data)
time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))
all.data <- merge(time.data,A1.data,A2.data,A3.data,by = "ID", all = T)
all.data <- merge(time.data,A1.data,A2.data,A3.data,by = c("ID"), all = T)
?cbind
all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)
head(all.data)
all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))
all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2
head(all.data)
all.data <- as.data.frame(all.data)
theme_custom <- theme_set(theme_grey(18))#
		plotobj <- ggplot(sim.data())#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
		plotobj <- plotobj + geom_line(aes(x = time, y = CONCS), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = time, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,100), breaks = c(0,10,20,30,40,50,60,70,80,90,100))#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
theme_custom <- theme_set(theme_grey(18))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
		plotobj <- plotobj + geom_line(aes(x = time, y = CONCS), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = time, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,100), breaks = c(0,10,20,30,40,50,60,70,80,90,100))#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
dim(all.data)
plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,100), breaks = c(0,10,20,30,40,50,60,70,80,90,100))#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
theme_custom <- theme_set(theme_grey(18))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)
plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = ribbon, alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = ribbon, alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))		#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(18))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
head(all.data)
tail(all.data)
plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS, group = ID), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR, group = ID), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
head(all.data)
max(all.data$CONCS)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = 0.26)		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = 0.95)	#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = 0.58)	#
		KE2 <- rnorm(1000, mean = 0.069, sd = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(18))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS, group = ID), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR, group = ID), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
?rnorm
theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS, group = ID), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR, group = ID), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = 0.26)		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = 0.95)	#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = 0.58)	#
		KE2 <- rnorm(1000, mean = 0.069, sd = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS, group = ID), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR, group = ID), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = 0.26/173)		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = 0.95/206)	#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = 0.58/0.020)	#
		KE2 <- rnorm(1000, mean = 0.069, sd = 0.26/0.069)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		#plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3, fun.y = median,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS, group = ID), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR, group = ID), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = ln(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = ln(0.95))	#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = ln(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = ln(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS, group = ID), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR, group = ID), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = log(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = log(0.95))	#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = log(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = log(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS, group = ID), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR, group = ID), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = 0.26)		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = 0.95)	#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = 0.58)	#
		KE2 <- rnorm(1000, mean = 0.069, sd = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS, group = ID), colour = "red", size = 1)#
		plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR, group = ID), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
		print(plotobj)
plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = 0.26)		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = 0.95)	#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = 0.58)	#
		KE2 <- rnorm(1000, mean = 0.069, sd = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
head(all.data)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rnorm(1000, mean = 173, sd = exp(0.26))		#mL/kg#
		V2 <- rnorm(1000, mean = 306, sd = exp(0.95))	#mL/kg#
		KE1 <- rnorm(1000, mean = 0.020, sd = exp(0.58))	#
		KE2 <- rnorm(1000, mean = 0.069, sd = exp(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, meanlog = 173, sdlong = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = 306, sdlong = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = 0.020, sdlong = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = 0.069, sdlong = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, meanlog = 173, sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = 306, sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = 0.020, sdlog = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = 0.069, sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
head(all.data)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, mean = 173, sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, mean = 306, sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, mean = 0.020, sdlog = 0.58)	#
		KE2 <- rlnorm(1000, mean = 0.069, sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
head(all.data)
V1
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, meanlog = 173, sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = 306, sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = 0.020, sdlog = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = 0.069, sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
head(all.data)
head(V1)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- plnorm(1000, meanlog = 173, sdlog = 0.26)		#mL/kg#
		V2 <- plnorm(1000, meanlog = 306, sdlog = 0.95)	#mL/kg#
		KE1 <- plnorm(1000, meanlog = 0.020, sdlog = 0.58)	#
		KE2 <- plnorm(1000, meanlog = 0.069, sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
head(all.data)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCS), colour = "red", size = 1)#
		#plotobj <- plotobj + geom_line(aes(x = TIME, y = CONCR), colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), fun.y = median, colour = "red", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), fun.y = median, colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.05)#
	CI90hi <- function(x) quantile(x, probs=0.95)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.ymin = median, colour = "red", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.ymin = median, colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=1)#
		theme_custom <- theme_set(theme_grey(12))#
		plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		print(plotobj)
plotobj <- ggplot(data = all.data)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
		plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
		plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n")#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)")#
		plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,100), breaks = c(0,10,20,30,40,50,60,70,80,90,100))#
		plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
		plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
		plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
		plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
		print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = mean, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = mean, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 8)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 8)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 6)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 6)#
	print(plotobj)
head(all.data)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = mean, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = mean, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		V1 <- rlnorm(1000, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = mean, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = mean, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = geomean, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = geomean, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=1)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
CI90lo <- function(x) quantile(x, probs=0)#
	CI90hi <- function(x) quantile(x, probs=1)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 25#
		V1 <- rlnorm(1000, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(1000, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(1000, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(1000, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(1000, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:1000)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 25#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 50#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 25#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 40#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*10		#mcg/kg#
	BDOSE <- 1000*5		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
?rlnorm
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 40#
		n <- 1#
		V1 <- rlnorm(n, meanlog = 173, sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = 306, sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = 0.020, sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = 0.069, sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 40#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = log(0.26))		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = log(0.95))	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = log(0.58))	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = log(0.26))#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 4#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 4000#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 4000#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 4000#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 4000#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 4000#
		n <- 1000#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 4000#
		n <- 10#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
rm(list=ls(all=TRUE))#
#Shiny server for IbuprofenNeonates App#
	library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(plyr)#
	library(arrayhelpers)#
	library(reshape2)#
#----------------------------------------------------------------------------------------	#
#Function containing differential equations for amount in each compartment#
		DES <- function(T, A, THETA)#
		{	#
	#Infusion specifications - by approxfun interpolation#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
            dA <- vector(len=3)#
			dA[1] = -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3]		#R-ibuprofen compartment#
			list(dA)#
		}#
#
#----------------------------------------------------------------------------------------#
#Defining patient parameters#
	#Make a TIME range	#
	TIME <- seq(from=0,to=72,by=0.1)#
		#Make a parameter vector for input into DES function		#
		KA <- 4000#
		n <- 1#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)		#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
		THETAlist <- c(KA,KE1,KE2,K21)#
	AGE <- 12#
#----------------------------------------------------------------------------------------#
#Input dosing data (LDOSE = loading dose, MDOSE = maintenance dose)#
#Each selection require its own LDOSE variable for the sliders#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#Define bolus events	#
		DOSEdata <- data.frame(var = c(1,1,1),#
					time = c(0,24,48),#
					value = c(LDOSE,BDOSE,BDOSE),#
					method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	all.data <- replicate(n, sim.data, simplify = "array")#
#Process the simulated output#
	all.data <- array2df(all.data, levels = list(NULL, x = TRUE, c = c(1:n)), label.x = "variable")#
	time.data <- subset(all.data, all.data$x == "time")#
	time.data <- time.data[,c(3,1)]#
	time.data <- rename(time.data, c("variable"="TIME","c"="ID"))#
	A1.data <- subset(all.data, all.data$x == "A1")#
	A1.data <- A1.data[,c(3,1)]#
	A1.data <- rename(A1.data, c("variable"="A1","c"="ID"))#
	A2.data <- subset(all.data, all.data$x == "A2")#
	A2.data <- A2.data[,c(3,1)]#
	A2.data <- rename(A2.data, c("variable"="A2","c"="ID"))#
	A3.data <- subset(all.data, all.data$x == "A3")#
	A3.data <- A3.data[,c(3,1)]#
	A3.data <- rename(A3.data, c("variable"="A3","c"="ID"))#
	all.data <- data.frame(time.data$ID,time.data$TIME,A1.data$A1,A2.data$A2,A3.data$A3)#
	all.data <- rename(all.data, c("time.data.ID"="ID",#
							"time.data.TIME"="TIME",#
							"A1.data.A1"="A1",#
							"A2.data.A2"="A2",#
							"A3.data.A3"="A3"))#
#
	all.data$CONCS <- all.data$A2/V1#
	all.data$CONCR <- all.data$A3/V2#
	all.data <- as.data.frame(all.data)#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	CI90lo <- function(x) quantile(x, probs=0.1)#
	CI90hi <- function(x) quantile(x, probs=0.9)#
	theme_custom <- theme_set(theme_grey(12))#
	plotobj <- ggplot(data = all.data)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 2.5), linetype = "dashed", size = 1)#
	plotobj <- plotobj + geom_abline(aes(slope = 0, intercept = 16.5), linetype = "dashed", size = 1)		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "red")#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "ribbon", alpha = 0.3,#
										fun.ymin = CI90lo, fun.ymax = CI90hi, fill = "blue")		#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCS), geom = "line", fun.y = median, colour = "red", size = 1)#
	plotobj <- plotobj + stat_summary(aes(x = TIME, y = CONCR), geom = "line", fun.y = median, colour = "blue", size = 1)#
	plotobj <- plotobj + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj <- plotobj + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	plotobj <- plotobj + annotate("text", x = 65, y = 95, label = "S-ibuprofen", colour = "red", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 90, label = "R-ibuprofen", colour = "blue", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 6, label = "IC50 COX-1", colour = "black", size = 4)#
	plotobj <- plotobj + annotate("text", x = 65, y = 20, label = "IC50 COX-2", colour = "black", size = 4)#
	print(plotobj)
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(parallel)#
	library(doParallel)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Function containing differential equations for amount in each compartment#
	DES <- function(T, A, THETA)#
	{	#
	#Infusion specifications - by approxfun interpolation#
		RateM <- 0#
		KA <- THETA[1]			#
		KE1 <- THETA[2]#
		KE2 <- THETA[3]#
		K21 <- THETA[4]#
        dA <- vector(len=3)#
		dA[1] = RateM[1] -2*KA*A[1]			#
		dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
		dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
		list(dA)#
	}#
	DES.cmpf <- cmpfun(DES)	#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#
#----------------------------------------------------------------------------------------	#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#----------------------------------------------------------------------------------------		#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(ID,KA,V1,V2,KE1,KE2,K21)#
	{	THETAlist <- c("KA"=KA,#
						"KE1"=KE1,#
						"KE2"=KE2,#
						"K21"=K21)#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver for simulated variability data and population values	#
	var.data <- lsoda(A_0, TIME, DES.cmpf, THETAlist, events = list(data=DOSEdata))#
	var.data <- as.data.frame(var.data)#
	cl <- makeCluster(detectCores() - 1)#
	registerDoParallel(cl, cores = detectCores() - 1)#
	data = foreach(i = 1:length(par.data), .packages = c("plyr"),#
					.combine = rbind) %dopar% {#
	sim.data <- mdply(par.data, simulate.conc)#
	}#
	stopCluster(cl)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(parallel)#
	library(doParallel)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Function containing differential equations for amount in each compartment#
	DES <- function(T, A, THETA)#
	{	#
	#Infusion specifications - by approxfun interpolation#
		RateM <- 0#
		KA <- THETA[1]			#
		KE1 <- THETA[2]#
		KE2 <- THETA[3]#
		K21 <- THETA[4]#
        dA <- vector(len=3)#
		dA[1] = RateM[1] -2*KA*A[1]			#
		dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
		dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
		list(dA)#
	}#
	DES.cmpf <- cmpfun(DES)	#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#
#----------------------------------------------------------------------------------------	#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#----------------------------------------------------------------------------------------		#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(ID,KA,V1,V2,KE1,KE2,K21)#
	{	THETAlist <- c("KA"=KA,#
						"KE1"=KE1,#
						"KE2"=KE2,#
						"K21"=K21)#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver for simulated variability data and population values	#
	var.data <- lsoda(A_0, TIME, DES.cmpf, THETAlist, events = list(data=DOSEdata))#
	var.data <- as.data.frame(var.data)#
	}#
	cl <- makeCluster(detectCores() - 1)#
	registerDoParallel(cl, cores = detectCores() - 1)#
	data = foreach(i = 1:length(par.data), .packages = c("plyr"),#
					.combine = rbind) %dopar% {#
	sim.data <- mdply(par.data, simulate.conc)#
	}#
	stopCluster(cl)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(parallel)#
	library(doParallel)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Function containing differential equations for amount in each compartment#
	DES <- function(T, A, THETA)#
	{	#
	#Infusion specifications - by approxfun interpolation#
		RateM <- 0#
		KA <- THETA[1]			#
		KE1 <- THETA[2]#
		KE2 <- THETA[3]#
		K21 <- THETA[4]#
        dA <- vector(len=3)#
		dA[1] = RateM[1] -2*KA*A[1]			#
		dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
		dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
		list(dA)#
	}#
	DES.cmpf <- cmpfun(DES)	#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#
#----------------------------------------------------------------------------------------	#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#----------------------------------------------------------------------------------------		#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(ID,KA,V1,V2,KE1,KE2,K21)#
	{	THETAlist <- c("KA"=KA,#
						"KE1"=KE1,#
						"KE2"=KE2,#
						"K21"=K21)#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver for simulated variability data and population values	#
	var.data <- lsoda(A_0, TIME, DES.cmpf, THETAlist, events = list(data=DOSEdata))#
	var.data <- as.data.frame(var.data)#
	}#
	cl <- makeCluster(detectCores() - 1)#
	registerDoParallel(cl, cores = detectCores() - 1)#
	data = foreach(i = 1:length(par.data), .packages = c("plyr","deSolve"),#
					.combine = rbind) %dopar% {#
	sim.data <- mdply(par.data, simulate.conc)#
	}#
	stopCluster(cl)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(parallel)#
	library(doParallel)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Function containing differential equations for amount in each compartment#
	DES <- function(T, A, THETA)#
	{	#
	#Infusion specifications - by approxfun interpolation#
		RateM <- 0#
		KA <- THETA[1]			#
		KE1 <- THETA[2]#
		KE2 <- THETA[3]#
		K21 <- THETA[4]#
        dA <- vector(len=3)#
		dA[1] = RateM[1] -2*KA*A[1]			#
		dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
		dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
		list(dA)#
	}#
	DES.cmpf <- cmpfun(DES)	#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#
#----------------------------------------------------------------------------------------	#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#----------------------------------------------------------------------------------------		#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(ID,KA,V1,V2,KE1,KE2,K21)#
	{	THETAlist <- c("KA"=KA,#
						"KE1"=KE1,#
						"KE2"=KE2,#
						"K21"=K21)#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver for simulated variability data and population values	#
	var.data <- lsoda(A_0, TIME, DES.cmpf, THETAlist, events = list(data=DOSEdata))#
	var.data <- as.data.frame(var.data)#
	}#
	cl <- makeCluster(detectCores() - 1)#
	registerDoParallel(cl, cores = detectCores() - 1)#
	sim.data = foreach(i = 1:length(par.data), .packages = c("plyr","deSolve")) %dopar%#
	{ sim.data <- mdply(par.data, simulate.conc, .parallel = TRUE) }#
	stopCluster(cl)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(doParallel)#
	registerDoParallel(cores = detectCores() - 1)#
	#registerDoParallel(cores = 20)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#
#----------------------------------------------------------------------------------------	#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#----------------------------------------------------------------------------------------		#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(par.data)#
	{	#
	DES <- function(T, A, THETA)#
	{	#
		#Infusion specifications - by approxfun interpolation#
			RateM <- 0#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
        	dA <- vector(len=3)#
			dA[1] = RateM[1] -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
			list(dA)#
	}#
	THETAlist <- c("KA"=par.data$KA,#
						"KE1"=par.data$KE1,#
						"KE2"=par.data$KE2,#
						"K21"=par.data$K21)#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver for simulated variability data and population values	#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	sim.data <- as.data.frame(sim.data)#
	}#
	simulate.conc.cmpf <- cmpfun(simulate.conc)	#
	sim.data <- ddply(par.data, .(ID,V1,V2), simulate.conc.cmpf, .parallel = TRUE)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plot_label <- "20-10-10 mg/kg IV bolus regimen\n"#
#
	theme_custom <- theme_set(theme_bw(12))#
	theme_custom <- theme_custom + theme_update(panel.grid.major = element_line(colour = "grey97"))#
	theme_custom <- theme_custom + theme_update(panel.grid.minor = element_line(colour = "white"))#
	theme_custom <- theme_custom + theme_update(plot.title = element_text(face = "bold", hjust = 0, size = 14))#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
LDOSE
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(doParallel)#
	registerDoParallel(cores = detectCores() - 1)#
	#registerDoParallel(cores = 20)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#----------------------------------------------------------------------------------------		#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(par.data)#
	{	#
	DES <- function(T, A, THETA)#
	{	#
		#Infusion specifications - by approxfun interpolation#
			RateM <- 0#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
        	dA <- vector(len=3)#
			dA[1] = RateM[1] -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
			list(dA)#
	}#
	THETAlist <- c("KA"=par.data$KA,#
						"KE1"=par.data$KE1,#
						"KE2"=par.data$KE2,#
						"K21"=par.data$K21)#
#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver for simulated variability data and population values	#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	sim.data <- as.data.frame(sim.data)#
	}#
	simulate.conc.cmpf <- cmpfun(simulate.conc)	#
	sim.data <- ddply(par.data, .(ID,V1,V2), simulate.conc.cmpf, .parallel = TRUE)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plot_label <- "20-10-10 mg/kg IV bolus regimen\n"#
#
	theme_custom <- theme_set(theme_bw(12))#
	theme_custom <- theme_custom + theme_update(panel.grid.major = element_line(colour = "grey97"))#
	theme_custom <- theme_custom + theme_update(panel.grid.minor = element_line(colour = "white"))#
	theme_custom <- theme_custom + theme_update(plot.title = element_text(face = "bold", hjust = 0, size = 14))#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(doParallel)#
	registerDoParallel(cores = detectCores() - 1)#
	#registerDoParallel(cores = 20)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#----------------------------------------------------------------------------------------		#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(par.data)#
	{	#
	DES <- function(T, A, THETA)#
	{	#
		#Infusion specifications - by approxfun interpolation#
			RateM <- 0#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
        	dA <- vector(len=3)#
			dA[1] = RateM[1] -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
			list(dA)#
	}#
	THETAlist <- c("KA"=par.data$KA,#
						"KE1"=par.data$KE1,#
						"KE2"=par.data$KE2,#
						"K21"=par.data$K21)#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
#Run differential equation solver for simulated variability data and population values	#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	sim.data <- as.data.frame(sim.data)#
	}#
	simulate.conc.cmpf <- cmpfun(simulate.conc)	#
	sim.data <- ddply(par.data, .(ID,V1,V2), simulate.conc.cmpf, .parallel = TRUE)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plot_label <- "20-10-10 mg/kg IV bolus regimen\n"#
#
	theme_custom <- theme_set(theme_bw(12))#
	theme_custom <- theme_custom + theme_update(panel.grid.major = element_line(colour = "grey97"))#
	theme_custom <- theme_custom + theme_update(panel.grid.minor = element_line(colour = "white"))#
	theme_custom <- theme_custom + theme_update(plot.title = element_text(face = "bold", hjust = 0, size = 14))#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
detectCores()
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(doParallel)#
	#registerDoParallel(cores = detectCores() - 1)#
	registerDoParallel(cores = 2)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#----------------------------------------------------------------------------------------		#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(par.data)#
	{	#
	DES <- function(T, A, THETA)#
	{	#
		#Infusion specifications - by approxfun interpolation#
			RateM <- 0#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
        	dA <- vector(len=3)#
			dA[1] = RateM[1] -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
			list(dA)#
	}#
	THETAlist <- c("KA"=par.data$KA,#
						"KE1"=par.data$KE1,#
						"KE2"=par.data$KE2,#
						"K21"=par.data$K21)#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
	library(deSolve)#
#Run differential equation solver for simulated variability data and population values	#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	sim.data <- as.data.frame(sim.data)#
	}#
	simulate.conc.cmpf <- cmpfun(simulate.conc)	#
	sim.data <- ddply(par.data, .(ID,V1,V2), simulate.conc.cmpf, .parallel = TRUE)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plot_label <- "20-10-10 mg/kg IV bolus regimen\n"#
#
	theme_custom <- theme_set(theme_bw(12))#
	theme_custom <- theme_custom + theme_update(panel.grid.major = element_line(colour = "grey97"))#
	theme_custom <- theme_custom + theme_update(panel.grid.minor = element_line(colour = "white"))#
	theme_custom <- theme_custom + theme_update(plot.title = element_text(face = "bold", hjust = 0, size = 14))#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
#remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Shiny server for IbuprofenNeonates App#
	#library(shiny)#
	library(deSolve)#
	library(ggplot2)#
	library(doBy)#
	library(plyr)#
	library(grid)#
	library(scales)#
	library(compiler)#
	library(doParallel)#
	registerDoParallel(cores = detectCores() - 1)#
	#registerDoParallel(cores = 2)#
#Compile the function using the compiler package - make it quicker		#
	ptm <- proc.time()   #Start the clock#
#
#Confidence Intervals	#
	CIlow <- 0.1#
	CIhi <- 0.9#
#
	sumfuncx <- function(x)#
	{	stat1 <-  median(x)#
		stat2 <-  quantile(x, probs=CIlow, names=F)#
		stat3 <-  quantile(x, probs=CIhi, names=F)#
		stat4 <-  length(x)#
		result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)#
		result#
	}#
#Make a TIME range	#
	TIME <- seq(from = 0,to = 72,by = 1)#
#
#----------------------------------------------------------------------------------------	#
#Number of individuals#
	n <- 1000#
#Make a parameter vector for input into DES function				#
	KA <- 100#
#Define variability for confidence intervals#
	#Trying to make them log-normally distributed#
		V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg#
		V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg#
		KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)	#
		KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)#
		K21 <- 0.014#
#Create a dataframe with ID and V1 and V2							#
	par.data <- seq(from = 1, to = n, by = 1)#
	par.data <- data.frame(par.data)#
	par.data$KA <- KA#
	par.data$V1 <- V1#
	par.data$V2 <- V2#
	par.data$KE1 <- KE1#
	par.data$KE2 <- KE2#
	par.data$K21 <- K21#
	names(par.data)[1] <- "ID"#
#----------------------------------------------------------------------------------------		#
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)			#
	LDOSE <- 1000*20		#mcg/kg#
	BDOSE <- 1000*10		#mcg/kg#
#
#Define loading and bolus events								#
	DOSEdata <- data.frame(var = c(1,1,1),#
				time = c(0,24,48),#
				value = c(LDOSE,BDOSE,BDOSE),#
				method = c("add","add","add"))#
#
#Define AGE - each selection requires its own AGE variable for the sliders#
	AGE <- 12#
#----------------------------------------------------------------------------------------	#
#Function for simulating concentrations for the ith patient#
	simulate.conc <- function(par.data)#
	{	#
	DES <- function(T, A, THETA)#
	{	#
		#Infusion specifications - by approxfun interpolation#
			RateM <- 0#
			KA <- THETA[1]			#
			KE1 <- THETA[2]#
			KE2 <- THETA[3]#
			K21 <- THETA[4]#
        	dA <- vector(len=3)#
			dA[1] = RateM[1] -2*KA*A[1]			#
			dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment#
			dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment#
			list(dA)#
	}#
	THETAlist <- c("KA"=par.data$KA,#
						"KE1"=par.data$KE1,#
						"KE2"=par.data$KE2,#
						"K21"=par.data$K21)#
#Set initial conditions#
	A_0 <- c(A1 = 0, A2 = 0, A3 = 0)#
	library(deSolve)#
#Run differential equation solver for simulated variability data and population values	#
	sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))#
	sim.data <- as.data.frame(sim.data)#
	}#
	simulate.conc.cmpf <- cmpfun(simulate.conc)	#
	sim.data <- ddply(par.data, .(ID,V1,V2), simulate.conc.cmpf, .parallel = TRUE)#
#Calculate concentration of R- and S-ibuprofen#
	sim.data$CONCS <- sim.data$A2/sim.data$V1#
	sim.data$CONCR <- sim.data$A3/sim.data$V2#
	statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))#
	names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")#
	statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))	#
	names(statsCONCR)[2] <- "Rmedian"#
#Combine both datasets#
	all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)	#
#
#----------------------------------------------------------------------------------------#
#Generate a plot of the data.#
#Also uses the inputs to build the plot.#
#
	plot_label <- "20-10-10 mg/kg IV bolus regimen\n"#
#
	theme_custom <- theme_set(theme_bw(12))#
	theme_custom <- theme_custom + theme_update(panel.grid.major = element_line(colour = "grey97"))#
	theme_custom <- theme_custom + theme_update(panel.grid.minor = element_line(colour = "white"))#
	theme_custom <- theme_custom + theme_update(plot.title = element_text(face = "bold", hjust = 0, size = 14))#
#
	plotobj5 <- NULL#
	plotobj5 <- ggplot(data = all.data)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)#
	plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)#
	plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)#
	plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))#
	plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))#
	print(plotobj5)#
#
	elapsedtime <- proc.time() - ptm  #Stop the clock#
	print(elapsedtime)
#A Shiny Application#
#Ibuprofen Neonates App#
#
rm(list=ls(all=TRUE))#
#
library(shiny)#
library(ggplot2)#
library(deSolve)#
library(shinyapps)#
library(devtools)#
library(plyr)#
library(arrayhelpers)#
library(reshape2)#
library(compiler)#
library(doParallel)#
#
#setwd("F:/2014/ShinyApps/")#
#setwd("/Volumes/Wojling/ShinyApps/")#
setwd("/Volumes/Prosecutor/2014/ShinyApps/")#
#
#where runApp points to the directory with server.R and ui.R#
runApp("IbuprofenNeonatesConcentrationsCompiled")
#A Shiny Application#
#Ibuprofen Neonates App#
#
rm(list=ls(all=TRUE))#
#
library(shiny)#
library(ggplot2)#
library(deSolve)#
library(shinyapps)#
library(devtools)#
library(plyr)#
library(arrayhelpers)#
library(reshape2)#
library(compiler)#
library(doParallel)#
#
#setwd("F:/2014/ShinyApps/")#
#setwd("/Volumes/Wojling/ShinyApps/")#
setwd("/Volumes/Prosecutor/2014/ShinyApps/")#
#
#where runApp points to the directory with server.R and ui.R#
runApp("IbuprofenNeonatesConcentrationsCompiled")
#A Shiny Application#
#Ibuprofen Neonates App#
#
rm(list=ls(all=TRUE))#
#
library(shiny)#
library(ggplot2)#
library(deSolve)#
library(shinyapps)#
library(devtools)#
library(plyr)#
library(arrayhelpers)#
library(reshape2)#
library(compiler)#
library(doParallel)#
#
#setwd("F:/2014/ShinyApps/")#
#setwd("/Volumes/Wojling/ShinyApps/")#
setwd("/Volumes/Prosecutor/2014/ShinyApps/")#
#
#where runApp points to the directory with server.R and ui.R#
runApp("IbuprofenNeonatesConcentrationsCompiled")
