var.data <- lsoda(A_0, TIME, DES.cmpf, THETAlist, events = list(data=DOSEdata))
var.data <- as.data.frame(var.data)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl, cores = detectCores() - 1)
data = foreach(i = 1:length(par.data), .packages = c("plyr"),
.combine = rbind) %dopar% {
sim.data <- mdply(par.data, simulate.conc)
}
stopCluster(cl)
#Calculate concentration of R- and S-ibuprofen
sim.data$CONCS <- sim.data$A2/sim.data$V1
sim.data$CONCR <- sim.data$A3/sim.data$V2
statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))
names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")
statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))
names(statsCONCR)[2] <- "Rmedian"
#Combine both datasets
all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)
#----------------------------------------------------------------------------------------
#Generate a plot of the data.
#Also uses the inputs to build the plot.
plotobj5 <- NULL
plotobj5 <- ggplot(data = all.data)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)
plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)
plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))
plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))
print(plotobj5)
elapsedtime <- proc.time() - ptm  #Stop the clock
print(elapsedtime)
#remove all current objects in the workspace
rm(list=ls(all=TRUE))
#Shiny server for IbuprofenNeonates App
#library(shiny)
library(deSolve)
library(ggplot2)
library(doBy)
library(plyr)
library(grid)
library(scales)
library(compiler)
library(parallel)
library(doParallel)
#Compile the function using the compiler package - make it quicker
ptm <- proc.time()   #Start the clock
#Confidence Intervals
CIlow <- 0.1
CIhi <- 0.9
sumfuncx <- function(x)
{	stat1 <-  median(x)
stat2 <-  quantile(x, probs=CIlow, names=F)
stat3 <-  quantile(x, probs=CIhi, names=F)
stat4 <-  length(x)
result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)
result
}
#Function containing differential equations for amount in each compartment
DES <- function(T, A, THETA)
{
#Infusion specifications - by approxfun interpolation
RateM <- 0
KA <- THETA[1]
KE1 <- THETA[2]
KE2 <- THETA[3]
K21 <- THETA[4]
dA <- vector(len=3)
dA[1] = RateM[1] -2*KA*A[1]
dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment
dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment
list(dA)
}
DES.cmpf <- cmpfun(DES)
#Make a TIME range
TIME <- seq(from = 0,to = 72,by = 1)
#----------------------------------------------------------------------------------------
#Number of individuals
n <- 1000
#Make a parameter vector for input into DES function
KA <- 100
#Define variability for confidence intervals
#Trying to make them log-normally distributed
V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg
V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg
KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)
KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)
K21 <- 0.014
#Create a dataframe with ID and V1 and V2
par.data <- seq(from = 1, to = n, by = 1)
par.data <- data.frame(par.data)
par.data$KA <- KA
par.data$V1 <- V1
par.data$V2 <- V2
par.data$KE1 <- KE1
par.data$KE2 <- KE2
par.data$K21 <- K21
names(par.data)[1] <- "ID"
#----------------------------------------------------------------------------------------
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)
LDOSE <- 1000*20		#mcg/kg
BDOSE <- 1000*10		#mcg/kg
#----------------------------------------------------------------------------------------
#Define AGE - each selection requires its own AGE variable for the sliders
AGE <- 12
#----------------------------------------------------------------------------------------
#Function for simulating concentrations for the ith patient
simulate.conc <- function(ID,KA,V1,V2,KE1,KE2,K21)
{	THETAlist <- c("KA"=KA,
"KE1"=KE1,
"KE2"=KE2,
"K21"=K21)
#Define loading and bolus events
DOSEdata <- data.frame(var = c(1,1,1),
time = c(0,24,48),
value = c(LDOSE,BDOSE,BDOSE),
method = c("add","add","add"))
#Set initial conditions
A_0 <- c(A1 = 0, A2 = 0, A3 = 0)
#Run differential equation solver for simulated variability data and population values
var.data <- lsoda(A_0, TIME, DES.cmpf, THETAlist, events = list(data=DOSEdata))
var.data <- as.data.frame(var.data)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl, cores = detectCores() - 1)
data = foreach(i = 1:length(par.data), .packages = c("plyr"),
.combine = rbind) %dopar% {
sim.data <- mdply(par.data, simulate.conc)
}
stopCluster(cl)
#Calculate concentration of R- and S-ibuprofen
sim.data$CONCS <- sim.data$A2/sim.data$V1
sim.data$CONCR <- sim.data$A3/sim.data$V2
statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))
names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")
statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))
names(statsCONCR)[2] <- "Rmedian"
#Combine both datasets
all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)
#----------------------------------------------------------------------------------------
#Generate a plot of the data.
#Also uses the inputs to build the plot.
plotobj5 <- NULL
plotobj5 <- ggplot(data = all.data)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)
plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)
plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))
plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))
print(plotobj5)
elapsedtime <- proc.time() - ptm  #Stop the clock
print(elapsedtime)
install.packages("dplyr")
#remove all current objects in the workspace
rm(list=ls(all=TRUE))
#Shiny server for IbuprofenNeonates App
#library(shiny)
library(deSolve)
library(ggplot2)
library(doBy)
library(plyr)
library(grid)
library(scales)
library(compiler)
library(doParallel)
#registerDoParallel(cores = detectCores() - 1)
registerDoParallel(cores = 2)
#Compile the function using the compiler package - make it quicker
ptm <- proc.time()   #Start the clock
#Confidence Intervals
CIlow <- 0.1
CIhi <- 0.9
sumfuncx <- function(x)
{	stat1 <-  median(x)
stat2 <-  quantile(x, probs=CIlow, names=F)
stat3 <-  quantile(x, probs=CIhi, names=F)
stat4 <-  length(x)
result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)
result
}
#Make a TIME range
TIME <- seq(from = 0,to = 72,by = 1)
#----------------------------------------------------------------------------------------
#Number of individuals
n <- 1000
#Make a parameter vector for input into DES function
KA <- 100
#Define variability for confidence intervals
#Trying to make them log-normally distributed
V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg
V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg
KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)
KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)
K21 <- 0.014
#Create a dataframe with ID and V1 and V2
par.data <- seq(from = 1, to = n, by = 1)
par.data <- data.frame(par.data)
par.data$KA <- KA
par.data$V1 <- V1
par.data$V2 <- V2
par.data$KE1 <- KE1
par.data$KE2 <- KE2
par.data$K21 <- K21
names(par.data)[1] <- "ID"
#----------------------------------------------------------------------------------------
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)
LDOSE <- 1000*20		#mcg/kg
BDOSE <- 1000*10		#mcg/kg
#Define loading and bolus events
DOSEdata <- data.frame(var = c(1,1,1),
time = c(0,24,48),
value = c(LDOSE,BDOSE,BDOSE),
method = c("add","add","add"))
#Define AGE - each selection requires its own AGE variable for the sliders
AGE <- 12
#----------------------------------------------------------------------------------------
#Function for simulating concentrations for the ith patient
simulate.conc <- function(par.data)
{
DES <- function(T, A, THETA)
{
#Infusion specifications - by approxfun interpolation
RateM <- 0
KA <- THETA[1]
KE1 <- THETA[2]
KE2 <- THETA[3]
K21 <- THETA[4]
dA <- vector(len=3)
dA[1] = RateM[1] -2*KA*A[1]
dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment
dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment
list(dA)
}
THETAlist <- c("KA"=par.data$KA,
"KE1"=par.data$KE1,
"KE2"=par.data$KE2,
"K21"=par.data$K21)
#Set initial conditions
A_0 <- c(A1 = 0, A2 = 0, A3 = 0)
#Run differential equation solver for simulated variability data and population values
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))
sim.data <- as.data.frame(sim.data)
}
simulate.conc.cmpf <- cmpfun(simulate.conc)
sim.data <- ddply(par.data, .(ID,V1,V2), simulate.conc.cmpf, .parallel = TRUE)
#Calculate concentration of R- and S-ibuprofen
sim.data$CONCS <- sim.data$A2/sim.data$V1
sim.data$CONCR <- sim.data$A3/sim.data$V2
statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))
names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")
statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))
names(statsCONCR)[2] <- "Rmedian"
#Combine both datasets
all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)
#----------------------------------------------------------------------------------------
#Generate a plot of the data.
#Also uses the inputs to build the plot.
plot_label <- "20-10-10 mg/kg IV bolus regimen\n"
theme_custom <- theme_set(theme_bw(12))
theme_custom <- theme_custom + theme_update(panel.grid.major = element_line(colour = "grey97"))
theme_custom <- theme_custom + theme_update(panel.grid.minor = element_line(colour = "white"))
theme_custom <- theme_custom + theme_update(plot.title = element_text(face = "bold", hjust = 0, size = 14))
plotobj5 <- NULL
plotobj5 <- ggplot(data = all.data)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)
plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)
plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))
plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))
print(plotobj5)
elapsedtime <- proc.time() - ptm  #Stop the clock
print(elapsedtime)
#remove all current objects in the workspace
rm(list=ls(all=TRUE))
#Shiny server for IbuprofenNeonates App
#library(shiny)
library(deSolve)
library(ggplot2)
library(doBy)
library(plyr)
library(grid)
library(scales)
library(compiler)
library(doParallel)
#registerDoParallel(cores = detectCores() - 1)
registerDoParallel(cores = 2)
#Compile the function using the compiler package - make it quicker
ptm <- proc.time()   #Start the clock
#Confidence Intervals
CIlow <- 0.1
CIhi <- 0.9
sumfuncx <- function(x)
{	stat1 <-  median(x)
stat2 <-  quantile(x, probs=CIlow, names=F)
stat3 <-  quantile(x, probs=CIhi, names=F)
stat4 <-  length(x)
result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)
result
}
#Make a TIME range
TIME <- seq(from = 0,to = 72,by = 1)
#----------------------------------------------------------------------------------------
#Number of individuals
n <- 1000
#Make a parameter vector for input into DES function
KA <- 100
#Define variability for confidence intervals
#Trying to make them log-normally distributed
V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg
V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg
KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)
KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)
K21 <- 0.014
#Create a dataframe with ID and V1 and V2
par.data <- seq(from = 1, to = n, by = 1)
par.data <- data.frame(par.data)
par.data$KA <- KA
par.data$V1 <- V1
par.data$V2 <- V2
par.data$KE1 <- KE1
par.data$KE2 <- KE2
par.data$K21 <- K21
names(par.data)[1] <- "ID"
#----------------------------------------------------------------------------------------
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)
LDOSE <- 1000*20		#mcg/kg
BDOSE <- 1000*10		#mcg/kg
#Define loading and bolus events
DOSEdata <- data.frame(var = c(1,1,1),
time = c(0,24,48),
value = c(LDOSE,BDOSE,BDOSE),
method = c("add","add","add"))
#Define AGE - each selection requires its own AGE variable for the sliders
AGE <- 12
#----------------------------------------------------------------------------------------
#Function for simulating concentrations for the ith patient
simulate.conc <- function(par.data)
{
DES <- function(T, A, THETA)
{
#Infusion specifications - by approxfun interpolation
RateM <- 0
KA <- THETA[1]
KE1 <- THETA[2]
KE2 <- THETA[3]
K21 <- THETA[4]
dA <- vector(len=3)
dA[1] = RateM[1] -2*KA*A[1]
dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment
dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment
list(dA)
}
THETAlist <- c("KA"=par.data$KA,
"KE1"=par.data$KE1,
"KE2"=par.data$KE2,
"K21"=par.data$K21)
#Set initial conditions
A_0 <- c(A1 = 0, A2 = 0, A3 = 0)
#Run differential equation solver for simulated variability data and population values
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))
sim.data <- as.data.frame(sim.data)
}
simulate.conc.cmpf <- cmpfun(simulate.conc)
sim.data <- ddply(par.data, .(ID,V1,V2), simulate.conc.cmpf, .parallel = TRUE, .inform = TRUE)
#Calculate concentration of R- and S-ibuprofen
sim.data$CONCS <- sim.data$A2/sim.data$V1
sim.data$CONCR <- sim.data$A3/sim.data$V2
statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))
names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")
statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))
names(statsCONCR)[2] <- "Rmedian"
#Combine both datasets
all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)
#----------------------------------------------------------------------------------------
#Generate a plot of the data.
#Also uses the inputs to build the plot.
plot_label <- "20-10-10 mg/kg IV bolus regimen\n"
theme_custom <- theme_set(theme_bw(12))
theme_custom <- theme_custom + theme_update(panel.grid.major = element_line(colour = "grey97"))
theme_custom <- theme_custom + theme_update(panel.grid.minor = element_line(colour = "white"))
theme_custom <- theme_custom + theme_update(plot.title = element_text(face = "bold", hjust = 0, size = 14))
plotobj5 <- NULL
plotobj5 <- ggplot(data = all.data)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)
plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)
plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))
plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))
print(plotobj5)
elapsedtime <- proc.time() - ptm  #Stop the clock
print(elapsedtime)
#remove all current objects in the workspace
rm(list=ls(all=TRUE))
#Shiny server for IbuprofenNeonates App
#library(shiny)
library(deSolve)
library(ggplot2)
library(doBy)
library(plyr)
library(grid)
library(scales)
library(compiler)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
#Compile the function using the compiler package - make it quicker
ptm <- proc.time()   #Start the clock
#Confidence Intervals
CIlow <- 0.1
CIhi <- 0.9
sumfuncx <- function(x)
{	stat1 <-  median(x)
stat2 <-  quantile(x, probs=CIlow, names=F)
stat3 <-  quantile(x, probs=CIhi, names=F)
stat4 <-  length(x)
result <- c("median"=stat1, "low"=stat2, "hi"=stat3, "n"=stat4)
result
}
#Make a TIME range
TIME <- seq(from = 0,to = 72,by = 1)
#----------------------------------------------------------------------------------------
#Number of individuals
n <- 1000
#Make a parameter vector for input into DES function
KA <- 100
#Define variability for confidence intervals
#Trying to make them log-normally distributed
V1 <- rlnorm(n, meanlog = log(173), sdlog = 0.26)	#mL/kg
V2 <- rlnorm(n, meanlog = log(306), sdlog = 0.95)	#mL/kg
KE1 <- rlnorm(n, meanlog = log(0.020), sdlog = 0.58)
KE2 <- rlnorm(n, meanlog = log(0.069), sdlog = 0.26)
K21 <- 0.014
#Create a dataframe with ID and V1 and V2
par.data <- seq(from = 1, to = n, by = 1)
par.data <- data.frame(par.data)
par.data$KA <- KA
par.data$V1 <- V1
par.data$V2 <- V2
par.data$KE1 <- KE1
par.data$KE2 <- KE2
par.data$K21 <- K21
names(par.data)[1] <- "ID"
#----------------------------------------------------------------------------------------
#Input dosing data (LDOSE = loading dose, BDOSE = bolus dose, CDOSE = continuous dose)
LDOSE <- 1000*20		#mcg/kg
BDOSE <- 1000*10		#mcg/kg
#Define loading and bolus events
DOSEdata <- data.frame(var = c(1,1,1),
time = c(0,24,48),
value = c(LDOSE,BDOSE,BDOSE),
method = c("add","add","add"))
#Define AGE - each selection requires its own AGE variable for the sliders
AGE <- 12
#----------------------------------------------------------------------------------------
#Function for simulating concentrations for the ith patient
simulate.conc <- function(par.data)
{
DES <- function(T, A, THETA)
{
#Infusion specifications - by approxfun interpolation
RateM <- 0
KA <- THETA[1]
KE1 <- THETA[2]
KE2 <- THETA[3]
K21 <- THETA[4]
dA <- vector(len=3)
dA[1] = RateM[1] -2*KA*A[1]
dA[2] = KA*A[1] +K21*A[3] -KE1*A[2]		#S-ibuprofen compartment
dA[3] = KA*A[1] -K21*A[3] -(KE2+0.155*((T+AGE)/24))*A[3] #R-ibuprofen compartment
list(dA)
}
THETAlist <- c("KA"=par.data$KA,
"KE1"=par.data$KE1,
"KE2"=par.data$KE2,
"K21"=par.data$K21)
#Set initial conditions
A_0 <- c(A1 = 0, A2 = 0, A3 = 0)
#Run differential equation solver for simulated variability data and population values
sim.data <- lsoda(A_0, TIME, DES, THETAlist, events = list(data=DOSEdata))
sim.data <- as.data.frame(sim.data)
}
simulate.conc.cmpf <- cmpfun(simulate.conc)
sim.data <- ddply(par.data, .(ID,V1,V2), simulate.conc.cmpf, .parallel = TRUE, .inform = TRUE)
#Calculate concentration of R- and S-ibuprofen
sim.data$CONCS <- sim.data$A2/sim.data$V1
sim.data$CONCR <- sim.data$A3/sim.data$V2
statsCONCS <- ddply(sim.data, .(time), function(sim.data) sumfuncx(sim.data$CONCS))
names(statsCONCS)[c(2,3,4)] <- c("Smedian","Slow95","Shi95")
statsCONCR <- ddply(sim.data, .(time), function(sim.data) median(sim.data$CONCR))
names(statsCONCR)[2] <- "Rmedian"
#Combine both datasets
all.data <- merge(statsCONCS,statsCONCR,by=c("time"),all=T)
#----------------------------------------------------------------------------------------
#Generate a plot of the data.
#Also uses the inputs to build the plot.
plot_label <- "20-10-10 mg/kg IV bolus regimen\n"
theme_custom <- theme_set(theme_bw(12))
theme_custom <- theme_custom + theme_update(panel.grid.major = element_line(colour = "grey97"))
theme_custom <- theme_custom + theme_update(panel.grid.minor = element_line(colour = "white"))
theme_custom <- theme_custom + theme_update(plot.title = element_text(face = "bold", hjust = 0, size = 14))
plotobj5 <- NULL
plotobj5 <- ggplot(data = all.data)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Smedian), colour = "red", size = 1)
plotobj5 <- plotobj5 + geom_line(aes(x = time, y = Rmedian), colour = "blue", size = 1)
plotobj5 <- plotobj5 + geom_ribbon(aes(x = time, ymin = Slow95, ymax = Shi95), fill = "red", alpha = 0.3)
plotobj5 <- plotobj5 + scale_y_continuous("Concentration (microg/mL) \n", lim=c(0,200))
plotobj5 <- plotobj5 + scale_x_continuous("\nTime (hours)", breaks=c(0,8,16,24,32,40,48,56,64,72))
print(plotobj5)
elapsedtime <- proc.time() - ptm  #Stop the clock
print(elapsedtime)
shiny::runApp('/Volumes/Prosecutor/2014/ShinyApps/IbuprofenNeonatesConcentrationsCompiled')
shiny::runApp('/Volumes/Prosecutor/2014/ShinyApps/IbuprofenNeonatesConcentrationsCompiled')
shiny::runApp()
shiny::runApp()
shiny::runApp()
